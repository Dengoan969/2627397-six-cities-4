openapi: 3.0.3
info:
  title: Api-сервер для проекта 6 городов
  version: 1.0.0
  description: API для проекта 6 городов
servers:
  - url: 'http://localhost:3000'
components:
  schemas:
    OfferBase:
      type: object
      properties:
        title:
          type: string
          minLength: 10
          maxLength: 100
        description:
          type: string
          minLength: 20
          maxLength: 1024
        price:
          type: number
          format: float
          minimum: 100
          maximum: 100000
        type:
          type: string
          enum: [apartment, house, room, hotel]
        isPremium:
          type: boolean
        isFavorite:
          type: boolean
        rating:
          type: number
          format: float
          minimum: 1
          maximum: 5
        city:
          type: string
          enum: [Paris, Cologne, Brussels, Amsterdam, Hamburg, Dusseldorf]
        previewImage:
          type: string
          format: uri
        images:
          type: array
          items:
            type: string
            format: uri
          minItems: 6
          maxItems: 6
        goods:
          type: array
          items:
            type: string
            enum:
              - Breakfast
              - Air conditioning
              - Laptop friendly workspace
              - Baby seat
              - Washer
              - Towels
              - Fridge
          minItems: 1
        bedrooms:
          type: integer
          minimum: 1
          maximum: 8
        maxAdults:
          type: integer
          minimum: 1
          maximum: 10
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float

    Offer:
      allOf:
        - $ref: '#/components/schemas/OfferBase'
        - type: object
          properties:
            id:
              type: string
              format: uuid
            host:
              type: string
              format: objectid
            commentCount:
              type: integer
            createdAt:
              type: string
              format: date-time
          required:
            - id
            - host
            - commentCount
            - createdAt

    User:
      type: object
      properties:
        id:
          type: string
          format: objectid
        email:
          type: string
          format: email
        name:
          type: string
          minLength: 1
          maxLength: 15
        avatarUrl:
          type: string
          format: uri
          pattern: '\.(jpg|png)$'
        type:
          type: string
          enum: [usual, pro]
      required:
        - email
        - name
        - type

    Comment:
      type: object
      properties:
        id:
          type: string
          format: objectid
        content:
          type: string
          minLength: 5
          maxLength: 1024
          description: "Текст комментария"
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: "Рейтинг"
        createdAt:
          type: string
          format: date-time
          description: "Дата публикации комментария"
        user:
          $ref: "#/components/schemas/User"
          description: "Автор комментария"
      required:
        - content
        - rating
        - user
        - createdAt

    CreateCommentDto:
      type: object
      properties:
        content:
          type: string
          minLength: 5
          maxLength: 1024
        rating:
          type: integer
          minimum: 1
          maximum: 5
        userId:
          type: string
          format: objectid
          pattern: "^[a-fA-F0-9]{24}$"
        offerId:
          type: string
          format: objectid
          pattern: "^[a-fA-F0-9]{24}$"
      required:
        - content
        - rating
        - userId
        - offerId

    CreateUserDto:
      type: object
      properties:
        email:
          type: string
          format: email
        name:
          type: string
          minLength: 1
          maxLength: 15
        password:
          type: string
          minLength: 6
          maxLength: 12
        type:
          type: string
          enum: [usual, pro]
        avatarUrl:
          type: string
          format: uri
          pattern: '\.(jpg|png)$'
      required:
        - email
        - name
        - password
        - type

    UpdateOfferDto:
      allOf:
        - $ref: '#/components/schemas/OfferBase'
      type: object
      x-typescript-type: 'Partial<OfferBase>'

    OffersListRdo:
      type: object
      properties:
        id:
          type: string
        price:
          type: number
        title:
          type: string
        type:
          type: string
        isFavorite:
          type: boolean
        createdAt:
          type: string
        city:
          type: string
        previewImage:
          type: string
        isPremium:
          type: boolean
        rating:
          type: number
        commentCount:
          type: integer
      required:
        - id
        - price
        - title
        - type
        - isFavorite
        - createdAt
        - city
        - previewImage
        - isPremium
        - rating
        - commentCount

    LoginUserDto:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
          maxLength: 12
      required:
        - email
        - password

paths:
  /offers:
    get:
      summary: "Список предложений"
      operationId: "listOffers"
      tags:
        - "Offer"
      parameters:
        - name: "limit"
          in: "query"
          description: "Количество предложений"
          required: false
          schema:
            type: integer
            default: 60
      responses:
        "200":
          description: "Список предложений"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OffersListRdo"

    post:
      summary: "Создание нового предложения"
      operationId: "createOffer"
      tags:
        - "Offer"
      security:
        - BearerAuth: []
      requestBody:
        description: "Данные для создания нового предложения"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Offer"
      responses:
        "201":
          description: "Предложение успешно создано"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Offer"
        "400":
          description: "Ошибка валидации данных"
        "401":
          description: "Неавторизованный запрос"

  /offers/{offerId}:
    get:
      summary: "Детальная информация о предложении"
      operationId: "getOfferById"
      tags:
        - "Offer"
      parameters:
        - name: "offerId"
          in: "path"
          required: true
          schema:
            type: string
            format: objectid
            pattern: "^[a-fA-F0-9]{24}$"
      responses:
        "200":
          description: "Детальная информация о предложении"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Offer"
        "404":
          description: "Предложение не найдено"

    delete:
      summary: "Удаление предложения"
      operationId: "deleteOffer"
      tags:
        - "Offer"
      parameters:
        - name: "offerId"
          in: "path"
          required: true
          schema:
            type: string
            format: objectid
      responses:
        "204":
          description: "Предложение успешно удалено"
        "403":
          description: "Отказано в доступе"
        "404":
          description: "Предложение не найдено"

    patch:
      summary: "Обновление предложения"
      operationId: "updateOffer"
      tags:
        - "Offer"
      parameters:
        - name: "offerId"
          in: "path"
          required: true
          schema:
            type: string
            format: objectid
      requestBody:
        description: "Данные для обновления предложения"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOfferDto"
      responses:
        "200":
          description: "Предложение успешно обновлено"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Offer"
        "404":
          description: "Предложение не найдено"

  /offers/premium:
    get:
      summary: "Премиальные предложения по городу"
      operationId: "getPremiumOffers"
      tags:
        - "Offer"
      parameters:
        - name: "city"
          in: "query"
          description: "Город"
          required: true
          schema:
            type: string
            enum: [Paris, Cologne, Brussels, Amsterdam, Hamburg, Dusseldorf]
      responses:
        "200":
          description: "Список премиальных предложений (максимум 3), отсортированных по дате"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OffersListRdo"
                maxItems: 3
        "400":
          description: "Не указан обязательный параметр city"

  /favorites:
    get:
      summary: "Список избранных предложений"
      operationId: "getFavoriteOffers"
      tags:
        - "Offer"
      security:
        - BearerAuth: []
      responses:
        "200":
          description: "Список избранных предложений"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Offer"
  /favorites/{offerId}:
    post:
      summary: "Добавить предложение в избранное"
      operationId: "addOfferToFavorites"
      tags:
        - "Offer"
      security:
        - BearerAuth: []
      parameters:
        - name: "offerId"
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Предложение добавлено в избранное"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Offer"
        "401":
          description: "Неавторизованный запрос"
        "404":
          description: "Предложение не найдено"

    delete:
      summary: "Удалить предложение из избранного"
      operationId: "removeOfferFromFavorites"
      tags:
        - "Offer"
      security:
        - BearerAuth: []
      parameters:
        - name: "offerId"
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Предложение удалено из избранного"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Offer"
        "401":
          description: "Неавторизованный запрос"
        "404":
          description: "Предложение не найдено"
  /comments/{offerId}:
    get:
      summary: "Список комментариев для предложения"
      operationId: "listComments"
      tags:
        - "Comment"
      parameters:
        - name: "offerId"
          in: "path"
          description: "ID предложения"
          required: true
          schema:
            type: string
            format: objectid
            pattern: "^[a-fA-F0-9]{24}$"
      responses:
        "200":
          description: "Список последних 50 комментариев, отсортированных по дате (desc)"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
                maxItems: 50
        "404":
          description: "Предложение не найдено"
  /comments:
    post:
      summary: "Добавление комментария"
      operationId: "createComment"
      tags:
        - "Comment"
      security:
        - BearerAuth: []
      requestBody:
        description: "Тело комментария"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCommentDto"
      responses:
        "201":
          description: "Комментарий успешно добавлен"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          description: "Ошибка валидации данных"
        "401":
          description: "Неавторизованный запрос"
  /users/register:
    post:
      summary: "Создание нового пользователя"
      operationId: "createUser"
      tags:
        - "User"
      requestBody:
        description: "Данные для создания нового пользователя"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "201":
          description: "Пользователь успешно создан"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Ошибка валидации данных"

  /users/avatar/{userId}:
    post:
      summary: "Загрузка аватара пользователя"
      operationId: "uploadUserAvatar"
      tags:
        - "User"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: string
            format: objectid
            pattern: "^[a-fA-F0-9]{24}$"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
            encoding:
              avatar:
                contentType: image/png, image/jpeg, image/jpg
      responses:
        "201":
          description: "Аватар успешно загружен"
          content:
            application/json:
              schema:
                type: object
                properties:
                  avatarUrl:
                    type: string
                    format: uri
        "400":
          description: "Файл не загружен"
        "404":
          description: "Пользователь не найден"

  /users/login:
    post:
      summary: "Вход в аккаунт"
      operationId: "loginUser"
      tags:
        - "User"
      requestBody:
        description: "Данные для входа"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUserDto"
      responses:
        "200":
          description: "Успешная аутентификация"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "401":
          description: "Неверный логин или пароль"

  /users/logout:
    post:
      summary: "Выход из аккаунта"
      operationId: "logoutUser"
      tags:
        - "User"
      security:
        - BearerAuth: []
      responses:
        "204":
          description: "Успешный выход"

  /users/check:
    get:
      summary: "Проверка состояния пользователя"
      operationId: "checkUser"
      tags:
        - "User"
      security:
        - BearerAuth: []
      responses:
        "200":
          description: "Информация о пользователе"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: "Не авторизован"


